{"version":3,"file":"bundle.js","sourceRoot":"","sources":["../src/util.ts","../src/rational.ts","../src/schema.ts","../src/game.ts","../src/components/Icon.tsx","../src/components/RecipeRow.tsx","../src/totals.ts","../src/components/RecipeCell.tsx","../src/components/RecipePicker.tsx","../src/components/RecipeGroup.tsx","../src/app.tsx","../src/init.tsx"],"names":[],"mappings":"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","sourcesContent":["export function assert(check: any, message?: string): void {\n    if (!check) {\n        throw new Error(message || \"Assertion failed\")\n    }\n}\n\nexport function values<T>(obj: { [s: string]: T }): T[] {\n    const values = []\n    for (let key in obj) {\n        values.push(obj[key])\n    }\n    return values\n}\n\n\nexport function nbsp(input: string) {\n    return input.replace(/ /g, \"\\u00A0\")\n}\n\nexport function clone<T>(orig: T): T {\n    return Object.assign( Object.create( Object.getPrototypeOf(orig)), orig)\n}\n","import {assert} from \"./util\";\n\nfunction num_gcd(a: number, b: number): number {\n    return (!b) ? a : num_gcd(b, a % b);\n}\n\nfunction num_divmod(a: number, b: number) {\n    assert(Number.isSafeInteger(a));\n    assert(Number.isSafeInteger(b));\n\n    return {\n        quotient: Math.floor(a / b),\n        remainder: a % b\n    }\n}\n\nexport class Rational {\n    p: number;\n    q: number;\n\n    constructor(p: number, q: number) {\n        assert(Number.isSafeInteger(p));\n        assert(Number.isSafeInteger(q));\n\n        if (q < 0) {\n            p = -p;\n            q = -q;\n        }\n\n        if (p == 0) {\n            q = 1;\n        }\n\n        const div = num_gcd(p, q)\n        if (div > 1) {\n            p = p / div\n            q = q / div\n        }\n        this.p = p;\n        this.q = q;\n    }\n\n    //\n    // Operations returning Rational\n    //\n    floor() {\n        const divmod = num_divmod(this.p, this.q)\n        let result = new Rational(divmod.quotient, 1)\n        if (result.less(Rational.zero) && divmod.remainder != 0) {\n            result = result.sub(Rational.one)\n        }\n        return result\n    }\n\n    negate() {\n        return new Rational(-this.p, this.q);\n    }\n\n    add(other: Rational) {\n        return new Rational(\n            (this.p * other.q) + (this.q * other.p),\n            this.q * other.q\n        )\n    }\n\n    sub(other: Rational) {\n        return new Rational(\n            (this.p * other.q) - (this.q * other.p),\n            this.q * other.q\n        )\n    }\n\n    mul(other: Rational | number): Rational {\n        if (typeof other == 'number') {\n            other = Rational.fromFloat(other)\n        }\n        return new Rational(this.p * other.p, this.q * other.q)\n    }\n\n    div(other: Rational) {\n        return new Rational(this.p * other.q, this.q * other.p);\n    }\n\n    //\n    // Operations NOT returning Rational\n    //\n    divmod(other: Rational) {\n        var quotient = this.div(other)\n        var div = quotient.floor()\n        var mod = this.sub(other.mul(div))\n        return {quotient: div, remainder: mod}\n    }\n\n    equal(other: Rational) {\n        return this.p == other.p && this.q == other.q\n    }\n\n    isOne() {\n        return this.p == 1\n    }\n\n    isZero() {\n        return this.p == 0\n    }\n\n    less(other: Rational) {\n        return (this.p * other.q) < (this.q * other.p)\n    }\n\n    toFloat() {\n        return this.p / this.q\n    }\n\n    toString() {\n        if (this.q == 1) {\n            return this.p.toString()\n        }\n        return this.p.toString() + \"/\" + this.q.toString()\n    }\n\n    //\n    // Statics\n    //\n    static fromFloat(num: number) {\n        if (Number.isInteger(num)) {\n            return new this(num, 1);\n        }\n\n        // Sufficient precision for our data?\n        var r = new Rational(Math.round(num * 10000), 10000)\n        // Recognize 1/3 and 2/3 explicitly.\n        var divmod = r.divmod(Rational.one)\n        if (divmod.remainder.equal(_one_third)) {\n            return divmod.quotient.add(Rational.oneThird)\n        } else if (divmod.remainder.equal(_two_thirds)) {\n            return divmod.quotient.add(Rational.twoThirds)\n        }\n        return r\n    }\n    static fromInts(p: number, q: number) {\n        return new this(p, q);\n    }\n\n    static zero = new Rational(0, 1);\n    static one = new Rational(1, 1);\n    static oneThird = new Rational(1, 3);\n    static twoThirds = new Rational(2, 3);\n\n}\n\n// Decimal approximations.\nconst _one_third = new Rational(3333, 10000)\nconst _two_thirds = new Rational(3333, 5000)\n\n","export type LocalisedName = {[locale: string]: string}\n\n\ninterface Effectable {\n    allowed_effects: Array<\"consumption\" | \"pollution\" | \"productivity\" | \"speed\">\n    module_slots: number\n}\n\nexport interface BaseEntity {\n    name: string;\n    localised_name: LocalisedName;\n    icon_col: number;\n    icon_row: number;\n\n    energy_usage?: number;\n    energy_source?: {\n        fuel_category: string\n        type: \"burner\"\n    }\n};\n\nexport interface AssemblingMachine extends BaseEntity, Effectable {\n    crafting_categories: string[]\n    crafting_speed: number\n    ingredient_count: number\n}\n\nexport interface MiningDrill extends BaseEntity, Effectable {\n    mining_power: number;\n    mining_speed: number;\n    resource_categories: string[];\n}\n\nexport interface OffshorePump extends BaseEntity {\n    fluid: string\n}\n\nexport interface RocketSilo extends AssemblingMachine {\n    rocket_parts_required: number;\n}\n\nexport interface TransportBelt extends BaseEntity {\n    belt_speed: number\n}\n\ninterface BaseItemOrFluid {\n    name: string;\n    localised_name: LocalisedName;\n    icon_col: number;\n    icon_row: number;\n    group: string;\n    subgroup: string\n    order: string;\n}\n\nexport interface BaseItem extends BaseItemOrFluid {\n    rocket_launch_products: Product[]\n}\n\nexport interface FluidItem extends BaseItemOrFluid {\n    type: \"fluid\";\n    default_temperature: number;\n}\n\ninterface FuelItem extends BaseItem {\n    fuel_category: string;\n    fuel_value: number;\n}\n\ninterface ModuleItem extends BaseItem {\n    type: \"module\"\n    category: \"effectivity\" | \"productivity\" | \"speed\"\n    effect: {\n        consumption?: {bonus: number}\n        pollution?: {bonus: number}\n        productivity?: {bonus: number}\n        speed?: {bonus: number}\n    }\n    limitation?: string[]\n}\n\nexport type Item = BaseItem | FuelItem | ModuleItem | FluidItem\n\nexport interface Ingredient {\n    name: string\n    amount: number\n    type?: \"item\" | \"fluid\"\n    minimum_temperature?: number\n    maximum_temperature?: number\n}\n\ninterface BaseProduct {\n    name: string\n    type?: \"item\" | \"fluid\"\n    temperature?: number\n    probability?: number\n}\n\ninterface ProductRange extends BaseProduct {\n    amount_min: number\n    amount_max: number\n}\ninterface ProductAmount extends BaseProduct {\n    amount: number\n}\n\nexport type Product = ProductAmount | ProductRange;\n\nexport interface Recipe {\n    name: string;\n    localised_name: LocalisedName;\n    category: string;\n    energy_required: number;\n    group: string;\n    subgroup: string;\n    icon_col: number;\n    icon_row: number;\n    ingredients: Ingredient[];\n    products: Product[];\n    type: \"recipe\";\n    order: string;\n\n    main_product?: string\n}\n\nexport interface Resource {\n    name: string;\n    localised_name: LocalisedName;\n    icon_col: number;\n    icon_row: number;\n\n    category: string;\n\n    minable: {\n        hardness: number;\n        mining_time: number;\n        results: Product[]\n        fluid_amount?: number\n        required_fluid?: string\n    }\n\n}\n\nexport interface Root {\n    active_mods: {[name: string]: string};\n\n    groups: {[groupName: string]: {\n        order: string\n        subgroups: {[subName: string]: string}\n    }}\n\n\n    fluids: string[];\n    fuel: string[];\n    modules: string[];\n\n    recipes: {[name: string]: Recipe};\n    resource: {[name: string]: Resource};\n\n    sprites: {\n        hash: string\n        extra: {[s:string]: {\n            icon_row: number\n            icon_col: number\n            name?: string\n        }}\n    }\n\n    items: {[name: string]: Item};\n\n    // other entities\n    \"assembling-machine\": {[name: string]: AssemblingMachine};\n    \"furnace\": {[name: string]: AssemblingMachine};\n    \"mining-drill\": {[name: string]: MiningDrill};\n    \"offshore-pump\": {[name: string]: OffshorePump};\n    \"reactor\": {[name: string]: BaseEntity};\n    \"rocket-silo\": {[name: string]: RocketSilo};\n    \"transport-belt\": {[name: string]: TransportBelt}\n}\n","\nimport {Rational} from \"./rational\"\nimport {assert, values} from \"./util\"\n\nimport * as schema from \"./schema\"\n\ntype LocalisedName = schema.LocalisedName\n\n\ninterface IBaseDisplayable {\n    name: string;\n    localised_name: LocalisedName;\n    icon_col: number;\n    icon_row: number;\n}\n\nexport class BaseDisplayable implements IBaseDisplayable {\n    name: string;\n    localised_name: LocalisedName;\n    icon_col: number;\n    icon_row: number;\n\n    constructor(data: IBaseDisplayable) {\n        this.name = data.name;\n        this.localised_name = data.localised_name\n        this.icon_col = data.icon_col\n        this.icon_row = data.icon_row\n    }\n\n    niceName() {\n        return this.localised_name.en;\n    }\n}\n\nexport class BaseItem extends BaseDisplayable {\n    usedBy: Recipe[] = [];\n    madeBy: Recipe[] = [];\n\n    constructor(d: schema.Item) {\n        super(d);\n        this.name = d.name;\n        this.localised_name = d.localised_name\n        this.icon_col = d.icon_col;\n        this.icon_row = d.icon_row;\n    }\n}\n\nexport class Item extends BaseItem {\n    // TODO: figure out type\n    type: \"item\" = \"item\"\n}\n\nexport class Fluid extends BaseItem {\n    default_temperature: number\n    type: \"fluid\" = \"fluid\"\n\n    constructor(d: schema.FluidItem) {\n        super(d)\n        this.default_temperature = d.default_temperature\n    }\n}\n\nabstract class BaseIngredient {\n    name: string;\n    amount: Rational\n    \n    constructor(d: schema.Ingredient) {\n        this.name = d.name\n        this.amount = Rational.fromFloat(d.amount)\n    }\n}\n\nexport class ItemIngredient extends BaseIngredient {\n    type: \"item\" = \"item\"\n    item: Item\n\n    constructor(d: schema.Ingredient, gd: GameData) {\n        super(d)\n        this.item = gd.itemMap[d.name]\n    }\n\n    niceName() {\n        return `${this.amount.toString()} × ${this.item.niceName() }`\n    }\n}\n\nexport class FluidIngredient extends BaseIngredient {\n    type: \"fluid\" = \"fluid\"\n    item: Fluid\n    minimum_temperature: number\n    maximum_temperature: number\n\n    constructor(d: schema.Ingredient, gd: GameData) {\n        super(d)\n        this.item = gd.fluidMap[d.name]\n        // TODO: convert super high floats to infinities\n        this.minimum_temperature = d.minimum_temperature || -Infinity\n        this.maximum_temperature = d.maximum_temperature || Infinity\n\n        if (this.maximum_temperature >= 1.797e+308) {\n            this.maximum_temperature = Infinity\n        }\n        if (this.minimum_temperature <= -1.797e+308) {\n            this.minimum_temperature = -Infinity\n        }\n    }\n\n    niceName() {\n        const min = this.minimum_temperature\n        const max = this.maximum_temperature\n        let range = \"\"\n        if (min != -Infinity && max != Infinity) {\n            range = ` (${min}° – ${max}°)`\n        } else if (max != Infinity) {\n            range = ` (≤ ${max}°)`\n        } else if (min != -Infinity) {\n            range = ` (≥ ${max}°)`\n        }\n        return `${this.amount.toString()} × ${this.item.niceName() }${range}`\n    }\n}\n\nexport type Ingredient = ItemIngredient | FluidIngredient\n\nabstract class BaseProduct {\n    name: string\n    amount: Rational\n\n    constructor(d: schema.Product) {\n        this.name = d.name\n\n        let amount;\n        if ('amount' in d) {\n            amount = Rational.fromFloat(d.amount)\n        } else {\n            amount = Rational.fromInts(d.amount_min + d.amount_max, 2)\n        }\n\n        if (d.probability && d.probability != 1) {\n            assert(d.probability > 0)\n            assert(d.probability < 1)\n            amount = amount.mul(Rational.fromFloat(d.probability))\n        }\n        this.amount = amount;\n    }\n}\n\nexport class ItemProduct extends BaseProduct {\n    type: \"item\" = \"item\"\n    item: Item\n\n    constructor(d: schema.Product, gd: GameData) {\n        super(d)\n        this.item = gd.itemMap[d.name]\n    }\n\n    niceName() {\n        return `${this.amount.toString()} × ${this.item.niceName()}`\n    }\n\n    satisfies(ingredient: Ingredient) {\n        return (\n            ingredient.type == \"item\" &&\n            ingredient.item == this.item)\n    }\n}\n\nexport class FluidProduct extends BaseProduct {\n    type: \"fluid\" = \"fluid\"\n    item: Fluid\n    temperature: number;\n\n    constructor(d: schema.Product, gd: GameData) {\n        super(d)\n        this.item = gd.fluidMap[d.name]\n        if (!this.item) {\n            console.log(\"no item\", d)\n            debugger\n        }\n        this.temperature = d.temperature || this.item.default_temperature\n    }\n\n    niceName() {\n        let temp = \"\"\n        if (this.temperature != this.item.default_temperature) {\n            temp = ` (${this.temperature}°)`\n        }\n        return `${this.amount.toString()} × ${this.item.niceName()}${temp}`\n    }\n\n    satisfies(ingredient: Ingredient) {\n        return (\n            ingredient.type == \"fluid\" &&\n            ingredient.item == this.item &&\n            ingredient.maximum_temperature >= this.temperature &&\n            ingredient.minimum_temperature <= this.temperature)\n    }\n}\n\nexport type Product = ItemProduct | FluidProduct\n\nexport class Recipe extends BaseDisplayable {\n    category: string;\n    ingredients: Ingredient[];\n    products: Product[];\n    crafting_time: Rational;\n\n    madeIn: Entity.AssemblingMachine[] = []\n\n    constructor(d: schema.Recipe, gd: GameData) {\n        super(d)\n        this.name = d.name;\n        this.category = d.category;\n        this.crafting_time = Rational.fromFloat(d.energy_required);\n\n        this.ingredients = d.ingredients.map((ingredient) => {\n            if (ingredient.type == \"fluid\") {\n                return new FluidIngredient(ingredient, gd); \n            } else {\n                return new ItemIngredient(ingredient, gd); \n            }\n        });\n\n        this.products = d.products.map((result) => {\n            if (result.type == \"fluid\") {\n                return new FluidProduct(result, gd); \n            } else {\n                return new ItemProduct(result, gd); \n            }\n        });\n    }\n\n    niceName() {\n        if (this.products.length > 1) {\n            return super.niceName()\n        } else if (this.products[0].amount.equal(Rational.one)) {\n            return this.products[0].item.niceName()\n        } else {\n            return this.products[0].niceName()\n        }\n\n    }\n}\n\nexport namespace Entity {\n    abstract class BaseEntity<T extends schema.BaseEntity> {\n        data: T\n        constructor(data: T) {\n            this.data = data\n        }\n\n        niceName() {\n            return this.data.localised_name.en\n        }\n    }\n\n    export class AssemblingMachine extends BaseEntity<schema.AssemblingMachine> {\n        canBuildRecipe(recipe: Recipe) {\n            // TODO: this needs to account for entity fluid boxes\n            if (this.data.crafting_categories.indexOf(recipe.category) == -1) {\n                return false\n            }\n            if (recipe.ingredients.length > this.data.ingredient_count) {\n                return false\n            }\n            return true\n        }\n    }\n}\n\nexport class GameData {\n    raw: schema.Root\n\n    items: Item[] = [];\n    itemMap: {[name: string]: Item} = {};\n    fluids: Fluid[] = [];\n    fluidMap: {[name: string]: Fluid} = {};\n\n    recipes: Recipe[] = [];\n    recipeMap: {[name: string]: Recipe} = {};\n\n    entities: {\n        \"assembling-machine\": Entity.AssemblingMachine[]\n        \"furnace\": Entity.AssemblingMachine[]\n        \"rocket-silo\": Entity.AssemblingMachine[]\n    }\n\n    constructor(data: schema.Root) {\n        this.raw = data\n\n        this.entities = {\n            'assembling-machine': values(data['assembling-machine']).map((m) => new Entity.AssemblingMachine(m)),\n            'furnace': values(data['furnace']).map((m) => new Entity.AssemblingMachine(m)),\n            'rocket-silo': values(data['rocket-silo']).map((m) => new Entity.AssemblingMachine(m)),\n        }\n\n        for (let itemName in data.items) {\n            const thing = data.items[itemName];\n            if (\"type\" in thing && thing.type == \"fluid\") {\n                const fluid = new Fluid(thing)\n                this.fluids.push(fluid)\n                this.fluidMap[fluid.name] = fluid\n            } else {\n                const item = new Item(thing);\n                this.items.push(item);\n                this.itemMap[item.name] = item;\n            }\n        }\n\n        for (let recipeName in data.recipes) {\n            const recipe = new Recipe(data.recipes[recipeName], this);\n\n            for (let machine of this.entities['assembling-machine']) {\n                if (machine.canBuildRecipe(recipe)) {\n                    recipe.madeIn.push(machine)\n                }\n            }\n            for (let furnace of this.entities['furnace']) {\n                if (furnace.canBuildRecipe(recipe)) {\n                    recipe.madeIn.push(furnace)\n                }\n            }\n            if (recipe.madeIn.length == 0) {\n                // Filter to only recipes buildable by knonwn assembling machines\n                console.log(\"Ignoring uncraftable recipe\", recipe.name, recipe)\n                continue\n            }\n\n            this.recipeMap[recipe.name] = recipe;\n            this.recipes.push(recipe)\n\n            for (let ingredient of recipe.ingredients) {\n                ingredient.item.usedBy.push(recipe);\n            }\n            for (let product of recipe.products) {\n                product.item.madeBy.push(recipe);\n            }\n        }\n    }\n}\n","import { h, Component } from \"preact\";\n\nimport * as game from \"../game\"\n\n\ntype Props = {\n    gameData: game.GameData\n    obj: {icon_row: number, icon_col: number}\n\n    text?: string\n    title?: string\n    onClick?(): void\n}\n\nexport class Icon extends Component<Props, {}> {\n\n    render() {\n        const gd = this.props.gameData\n        const obj = this.props.obj;\n        const x = -obj.icon_col * 32\n        const y = -obj.icon_row * 32\n\n        const divStyle = {\n            display: \"inline-block\",\n            backgroundImage: `url(sprite-sheet-${gd.raw.sprites.hash}.png)`,\n            backgroundPosition: `${x}px ${y}px`,\n            width: \"32px\",\n            height: \"32px\"\n        };\n        let icon = (<div\n            title={this.props.title}\n            className=\"icon\"\n            style={divStyle}\n            onClick={this.props.onClick}>&nbsp;</div>\n        )\n\n        if (this.props.text) {\n            return (\n                <div style=\"line-height: 32px\">\n                    {icon}{this.props.text}\n                </div>\n            )\n        } else {\n            return icon\n        }\n    }\n\n}\n","import { h, Component } from \"preact\";\n\nimport * as game from \"../game\"\n// import {Totals} from '../totals'\n\nimport {Icon} from './Icon'\n\nimport {clone} from '../util'\nimport {Totals} from '../totals'\n\ntype ChangeableProps = {\n    recipe: game.Recipe\n    machine: game.Entity.AssemblingMachine\n    numMachines: number\n    // modules: game.Entity.Module[]\n}\n\nexport type Props = {\n    gameData: game.GameData\n    onRemove(r: game.Recipe): void\n    onChange(r: Props): void\n} & ChangeableProps\n\ntype State = {}\n\nexport class RecipeRow extends Component<Props, State> {\n\n    public handleRemoveClick = () => {\n        this.props.onRemove(this.props.recipe)\n    }\n\n    public handleMachineChange = () => {\n    }\n\n    public handleNumMachinesChange = (event: Event) => {\n        const target = event.target as HTMLInputElement;\n        const num = Number(target.value);\n        if (!Number.isInteger(num)) {\n            // TODO: error?\n            return\n        }\n        if (Number.isInteger(num) && num >= 0) {\n            this.applyChange({numMachines: num})\n        }\n    }\n\n    applyChange(changes: Partial<ChangeableProps>) {\n        let newprops = Object.assign(clone(this.props), changes)\n        this.props.onChange(newprops)\n    }\n\n    getOutput() {\n        let t = new Totals()\n        t.addRow(this.props)\n        return {\n            ingredients: t.ingredients,\n            products: t.products\n        }\n    }\n\n    render() {\n        let recipe = this.props.recipe\n        let output = this.getOutput()\n\n        let ingredients = output.ingredients.map((ingredient) =>\n            <Icon\n                obj={ingredient.item}\n                gameData={this.props.gameData}\n                text={ingredient.niceName()} />\n        )\n        let products = output.products.map((product) =>\n            <Icon\n                obj={product.item}\n                gameData={this.props.gameData}\n                text={product.niceName()} />\n        )\n        return (\n            <div className=\"recipe-row\">\n                <div className=\"recipe-cell\">\n                    <div style=\"line-height: 32px\">\n                        <Icon\n                            obj={recipe}\n                            gameData={this.props.gameData} />\n                        {recipe.niceName()} × <input\n                            value={this.props.numMachines}\n                            onInput={this.handleNumMachinesChange}\n                            type=\"number\" min=\"0\" step=\"1\" />\n                        <Icon\n                            obj={this.props.machine.data}\n                            gameData={this.props.gameData}\n                            title={this.props.machine.niceName()}/>\n\n                        <div style=\"float:right\">\n                            <Icon\n                                obj={recipe}\n                                gameData={this.props.gameData}\n                                title=\"Remove recipe\"\n                                onClick={this.handleRemoveClick} />\n                        </div>\n                    </div>\n                    <hr />\n\n                    <div style=\"display: inline-block\">\n                        Ingredients:\n                        {ingredients}\n                    </div>\n\n                    <div style=\"display: inline-block\">\n                        Products:\n                        {products}\n                    </div>\n                </div>\n            </div>\n        )\n    }\n\n}\n","import * as game from \"./game\"\n\nimport {clone} from './util'\n\nimport {Rational} from \"./rational\"\n\nimport {Props as RecipeRowProps} from \"./components/RecipeRow\"\n\n\nexport class Totals {\n    products: game.Product[] = []\n    ingredients: game.Ingredient[] = []\n\n    addIngredient = (newIng: game.Ingredient) => {\n        for (let oldIng of this.ingredients) {\n            let match = (\n                newIng.type == oldIng.type &&\n                newIng.item == oldIng.item)\n            if (newIng.type == \"fluid\" && oldIng.type == \"fluid\") {\n                match = match && (\n                    newIng.maximum_temperature == oldIng.maximum_temperature &&\n                    newIng.minimum_temperature == oldIng.minimum_temperature)\n            }\n\n            if (match) {\n                oldIng.amount = oldIng.amount.add(newIng.amount)\n                return\n            }\n        }\n        this.ingredients.push(newIng)\n    }\n\n    addProduct = (newProd: game.Product) => {\n        for (let oldProd of this.products) {\n            let match = (\n                newProd.type == oldProd.type &&\n                newProd.item == oldProd.item)\n            if (newProd.type == \"fluid\" && oldProd.type == \"fluid\") {\n                match = match && newProd.temperature == oldProd.temperature\n            }\n\n            if (match) {\n                oldProd.amount = oldProd.amount.add(newProd.amount)\n                return\n            }\n        }\n        this.products.push(newProd)\n    }\n\n    addRow(row: RecipeRowProps) {\n        let mult = Rational.one.mul(row.numMachines).mul(row.machine.data.crafting_speed)\n\n        row.recipe.ingredients\n            .map((ingredient) => {\n                ingredient = clone(ingredient)\n                ingredient.amount = ingredient.amount.mul(mult)\n                return ingredient\n            })\n            .forEach(this.addIngredient)\n\n        row.recipe.products\n            .map((product) => {\n                product = clone(product)\n                product.amount = product.amount.mul(mult)\n                return product\n            })\n            .forEach(this.addProduct)\n    }\n\n    reduce() {\n        let ingredients = this.ingredients.map(clone)\n        let products = this.products.map(clone)\n\n        for (let product of products) {\n            for (let ingredient of ingredients) {\n                if (product.amount.isZero() || ingredient.amount.isZero()) {\n                    continue\n                }\n                if (!product.satisfies(ingredient)) {\n                    continue\n                }\n                if (product.amount.less(ingredient.amount)) {\n                    // More ingredient than product\n                    ingredient.amount = ingredient.amount.sub(product.amount)\n                    product.amount = Rational.zero\n                } else if (ingredient.amount.less(product.amount)) {\n                    // More product than ingredient\n                    product.amount = product.amount.sub(ingredient.amount)\n                    ingredient.amount = Rational.zero\n                } else {\n                    ingredient.amount = Rational.zero\n                    product.amount = Rational.zero\n                }\n            }\n        }\n\n        ingredients = ingredients.filter(i => !i.amount.isZero())\n        products = products.filter(p => !p.amount.isZero())\n\n        return {ingredients, products}\n    }\n}\n","import { h, Component } from \"preact\";\n\nimport * as game from \"../game\"\n\n\nimport {Icon} from './Icon'\n\ntype Props = {\n    gameData: game.GameData\n    recipe: game.Recipe\n    onClick?(r: game.Recipe): void\n}\n\ntype State = {\n}\n\nexport class RecipeCell extends Component<Props, State> {\n    public handleClick = () => {\n        this.props.onClick && this.props.onClick(this.props.recipe)\n    }\n\n    render() {\n        let recipe = this.props.recipe\n\n        let ingredients = recipe.ingredients.map((ingredient) =>\n            <div style=\"line-height: 32px\">\n                <Icon\n                    obj={ingredient.item}\n                    gameData={this.props.gameData} />\n                {ingredient.niceName()}\n            </div>\n        )\n        let products = recipe.products.map((product) =>\n            <div style=\"line-height: 32px\">\n                <Icon\n                    obj={product.item}\n                    gameData={this.props.gameData} />\n                {product.niceName()}\n            </div>\n        )\n\n        return (\n            <div className=\"recipe-cell\" onClick={this.handleClick}>\n                <div style=\"display: inline-block\">\n                    <div style=\"line-height: 32px\">\n                        <Icon\n                            obj={recipe}\n                            gameData={this.props.gameData} />\n                        {recipe.niceName() }\n                    </div>\n                    <div style=\"line-height: 32px\">\n                        <Icon\n                            obj={this.props.gameData.raw.sprites.extra[\"clock\"]}\n                            gameData={this.props.gameData} />\n                        { recipe.crafting_time.toString() }\n                    </div>\n                    {ingredients}\n                </div>\n\n                <div style=\"display: inline-block\">\n                    Products:\n                    {products}\n                </div>\n            </div>\n        )\n    }\n}\n","import { h, Component } from \"preact\";\n\nimport * as game from \"../game\"\n\nimport {RecipeCell} from './RecipeCell'\n\ntype Props = {\n    gameData: game.GameData\n    recipes: game.Recipe[]\n    onPickRecipe(r: game.Recipe): void\n}\n\ntype State = {\n    query: string\n    focused: boolean\n}\n\nexport class RecipePicker extends Component<Props, State> {\n\n    public handleQueryInput = (event: Event) => {\n        let target = event.target as HTMLInputElement\n        this.setState({query: target.value})\n    }\n\n    public handleRecipeClick = (recipe: game.Recipe) => {\n        this.props.onPickRecipe(recipe)\n        this.setState({query: \"\"})\n    }\n\n    public handleFocus = () => {\n        this.setState({focused: true})\n    }\n    public handleBlur = () => {\n        // delay 100ms to let click events register\n        setTimeout(() => {\n            this.setState({focused: false})\n        }, 100)\n    }\n\n    render() {\n        let query = (this.state.query || \"\").toLowerCase()\n        let matches = this.props.recipes\n            .filter((recipe) => {\n                if (query || this.state.focused) {\n                    return (\n                        recipe.niceName().toLowerCase().includes(query) ||\n                        recipe.name.toLowerCase().includes(query))\n                }\n                return false\n            })\n            .slice(0, 10)\n            .map((r) => <RecipeCell\n                recipe={r}\n                gameData={this.props.gameData}\n                onClick={this.handleRecipeClick}/>)\n\n        return (\n        <div>\n            <input\n                value={this.state.query}\n                onInput={this.handleQueryInput}\n                onFocus={this.handleFocus}\n                onBlur={this.handleBlur}\n            />\n            {matches}\n        </div>\n        )\n    }\n\n}\n","import { h, Component } from \"preact\";\n\nimport * as game from \"../game\"\nimport {Totals} from \"../totals\"\n\nimport {RecipeRow, Props as RecipeRowProps} from './RecipeRow'\nimport {RecipePicker} from './RecipePicker'\n\n\ntype Props = {\n    gameData: game.GameData\n}\n\ntype State = {\n    rows: RecipeRowProps[]\n}\n\nexport class RecipeGroup extends Component<Props, State> {\n    constructor(props: Props) {\n        super(props)\n\n        this.state = {\n            rows: []\n        }\n    }\n\n    public handlePickRecipe = (recipe: game.Recipe) => {\n        this.addRow(recipe)\n    }\n\n    addRow(recipe: game.Recipe) {\n        let row = {\n            gameData: this.props.gameData,\n            onRemove: this.removeRow.bind(this, recipe),\n            onChange: this.changeRow.bind(this),\n\n            recipe: recipe,\n            machine: recipe.madeIn[0],\n            numMachines: 1,\n        }\n        this.setState({rows: this.state.rows.concat([row])})\n    }\n\n    changeRow(newRow: RecipeRowProps) {\n        this.setState({rows: this.state.rows.map((oldRow) => {\n            return oldRow.recipe == newRow.recipe ? newRow : oldRow\n        })})\n    }\n\n    removeRow(recipe: game.Recipe) {\n        this.setState({rows: this.state.rows.filter((row) => {\n            return row.recipe != recipe\n        })})\n    }\n\n    renderRow(row: RecipeRowProps) {\n        return <RecipeRow {...row} />\n    }\n\n    render() {\n        let availableRecipes = this.props.gameData.recipes.filter((recipe) => {\n            return !this.state.rows.some(row => row.recipe == recipe)\n        })\n\n        let totals = new Totals()\n        for (let row of this.state.rows) {\n            totals.addRow(row)\n        }\n        let reduced = totals.reduce()\n\n        return (\n        <div>\n            <h3>Add recipe picker</h3>\n            <RecipePicker\n                recipes={availableRecipes}\n                gameData={this.props.gameData}\n                onPickRecipe={this.handlePickRecipe} />\n            <hr />\n            <div>Have {this.state.rows.length} row(s)</div>\n            {this.state.rows.map(this.renderRow)}\n            <hr />\n            Ingredients:\n            <ul>\n            {reduced.ingredients.map(i => <li>{i.niceName()}</li>)}\n            </ul>\n            Products:\n            <ul>\n            {reduced.products.map(p => <li>{p.niceName()}</li>)}\n            </ul>\n\n        </div>\n        )\n    }\n}\n","import { h, Component } from \"preact\";\n\nimport * as game from \"./game\"\n\nimport {RecipeGroup} from \"./components/RecipeGroup\"\n\ninterface State {\n    crashMsg?: string\n    group: JSX.Element | null\n}\n\nexport class App extends Component<{}, State> {\n\n    constructor(props: {}) {\n        super(props)\n\n        this.state = {\n            group: null\n        }\n\n        fetch(\"seablock.json\")\n            .then((response) => response.json())\n            .then((raw: any) => {\n                this.setState({\n                    group: <RecipeGroup gameData={new game.GameData(raw)} />\n                });\n            })\n            .catch(error => {\n                console.error(error);\n                this.crash(error);\n            });\n    }\n\n    crash(msg: string) {\n        this.setState({\n            crashMsg: msg\n        })\n    }\n\n    render() {\n        if (this.state.crashMsg != null) {\n            return <div>\n                <h1>Crashed!</h1>\n                <span>{this.state.crashMsg}</span>\n            </div>\n        } else if (!this.state.group) {\n            return <h1>Loading...</h1>\n        } else {\n            return (\n            <div>\n                {this.state.group}\n            </div>\n            )\n        }\n\n    }\n}\n","import { h, render } from \"preact\";\n\nimport {App} from \"./app\"\n\nrender(<App />, document.querySelector('#app')!);\n"]}